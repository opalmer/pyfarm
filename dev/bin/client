#!/usr/bin/env python
'''
HOMEPAGE: www.pyfarm.net
INITIAL: Nov 21 2010
PURPOSE [FOR DEVELOPMENT PURPOSES ONLY]:
    Script meant to run and manage Client.py on
    a remote Host using a Screen session

    This file is part of PyFarm.
    Copyright (C) 2008-2010 Oliver Palmer

    PyFarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PyFarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with PyFarm.  If not, see <http://www.gnu.org/licenses/>.
'''
import os
import time
import logging
import lib.Screen as Screen
import lib.Host as Host
from optparse import OptionParser

logging.basicConfig(format='%(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('ClientProcess')
logger.setLevel(logging.DEBUG)

def findClient():
    '''Navigate up the directory and return the path to the client script'''
    logger.debug("Searching for client")
    path = os.path.abspath(__file__)
    for i in range(3):
        path = os.path.dirname(path)

    client = os.path.join(path, "Client.py")

    if os.path.isfile(client):
        logger.debug("Client Script: %s" % client)
        return client

    else:
        return False

def query():
    '''Query the status of the client program'''
    isRunning = Screen.isRunning()

    if isRunning:
        logger.info("Client is running, %i session(s)" % isRunning)
        for session in Screen.sessions():
            logger.info("PID: %s" % session.pid)

    else:
        logger.info("Client is not running")


def start():
    '''Start the client program'''
    client = findClient()

    if not Screen.isRunning():
        logger.info("Starting client")
        Screen.start(client)

    else:
        logger.info("Client is running, not starting")

def restart():
    '''Restart the client program'''
    client = findClient()
    logger.info("Restarting client")

def stop():
    logger.info("Attempting to stop client(s)")
    for session in Screen.sessions():
        logger.info("Stopping Process: %s" % session.pid)

        if os.name == "posix":
            os.kill(int(session.pid), 3)
        else:
            logger.error("Cannot kill a Screen process on this os!")

    logger.info("Searching for processes to cleanup")
    time.sleep(2)
    if not Screen.isRunning():
        logger.info("Client is not running")
    else:
        for session in Screen.sessions():
            logger.error("Failed to stop process: %s" % session.pid)
            sys.exit(1)

if __name__ == '__main__':
    options = ('start', 'stop', 'restart', 'query')
    parser  = OptionParser()

    for option in options:
        parser.add_option(
                            "--%s" % option, dest="%s" % option,
                            default=False, action='store_true',
                            help="%s the client" % option
                         )

    (opt, args) = parser.parse_args()

    entered = False
    for option in options:
        if eval('opt.%s' % option):
            eval('%s()' % option)
            entered = True

    if not entered:
        logger.error("Run --help for usage information")
        sys.exit(1)